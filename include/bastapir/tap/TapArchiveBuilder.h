//
// Copyright 2018 Juraj Durech <durech.juraj@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#pragma once

#include <bastapir/common/ErrorLogging.h>
#include <bastapir/tap/FileEntry.h>

namespace bastapir
{
namespace tap
{
	class TapArchiveBuilder
	{
	public:
		
		TapArchiveBuilder(ErrorLogging * log);
		
		/// Set associated source file to this builder.
		void setSourceFileInfo(const SourceFileInfo & info);
		
		/// Returns associated source file.
		const SourceFileInfo & sourceFileInfo() const;
		
		/// Adds file |entry| into the builder.
		void addFile(const FileEntry & entry);
		
		/// Builds a whole "TAP" file for all previously added file entries.
		/// If empty array is returned, then there was a problem with file added to the builder.
		ByteArray build() const;

		/// Generates "raw" byte stream for given |bytes|. Parameter |is_header| affects whether the bytes contains
		/// tape header or block of data. If |is_tap_block| is false, then the generated bytes are just exact
		/// the same, as ZX spectrum would save to the tape. If |is_tap_block| is true, then the block for "TAP" file
		/// is generated.
		static ByteArray serializeTapeStream(const ByteRange & bytes, bool is_header, bool is_tap_block = true);
		
		/// Generates 17 bytes header for given file entry.
		static ByteArray serializeHeader(const FileEntry & file);

	private:
		
		/// Reports error to logger
		void reportError(const FileEntry & entry, FileEntry::ValidationResult result) const;
		
		/// Information about what's source of this TAP file.
		SourceFileInfo _sourceFileInfo;
		
		/// Logger
		ErrorLogging * _logging;
		
		/// Files added to the TAP stream
		std::vector<FileEntry> _files;
	};
	
} // bastapir::tap
} // bastapir
